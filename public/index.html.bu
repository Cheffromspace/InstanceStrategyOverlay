<!doctype html>
<html>
  <head>
    <title>FFXIV Instance Strategy Overlay</title>
    <script src="https://overlayplugin.github.io/OverlayPlugin/assets/shared/common.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        min-height: 100vh;
      }
      #strategyContainer {
        width: 80%;
        max-width: 800px;
        background-color: #1c1c1c;
        border: 1px solid #4d4d4d;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        margin-top: 20px;
        resize: both;
        position: relative;
      }
      .resizeHandle {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 16px;
        height: 16px;
        border-right: 2px solid #ded7be;
        border-bottom: 2px solid #ded7be;
        cursor: se-resize;
      }
      #strategyHeader {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: #333333;
        cursor: pointer;
      }
      #strategyTitle {
        font-size: 24px;
        font-weight: bold;
        color: #ffffff;
      }
      #toggleButton {
        font-size: 16px;
        color: #ffffff;
        background: none;
        border: none;
        cursor: pointer;
      }

      #strategyContent {
        padding: 20px;
        display: none;
        overflow-y: auto; /* Enable vertical scrolling */
      }

      #strategyContent::-webkit-scrollbar {
        width: 8px;
      }
      #strategyContent::-webkit-scrollbar-track {
        background-color: #333333;
      }
      #strategyContent::-webkit-scrollbar-thumb {
        background-color: #888888;
        border-radius: 4px;
      }
      #strategyContent::-webkit-scrollbar-thumb:hover {
        background-color: #555555;
      }
      #strategyText {
        font-size: 16px;
        line-height: 1.6;
        color: #ffffff;
      }
      .error {
        color: #ff4d4d;
      }
      .boss {
        font-weight: 900;
        color: #00ffcc;
      }
      .ability {
        font-weight: bold;
        color: #ffcc00;
      }
      .mechanic {
        font-style: italic;
        color: #00ffff;
      }
    </style>
  </head>
  <body>
    <div id="strategyContainer">
      <div id="strategyHeader">
        <div id="strategyTitle">Instance Strategy Overlay</div>
        <!-- <button id="toggleButton">â–²</button> -->
      </div>
      <div id="strategyContent">
        <div id="strategyText"></div>
      </div>
      <div id="resizeHandle"></div>
    </div>
    <script>
      // Subscribe to the 'LogLine' event
      addOverlayListener("LogLine", (data) => {
        const logLine = data.rawLine;
        // Check if the log line contains 'has begun.'
        if (logLine.includes("has begun.")) {
          console.log("Log line:", logLine);
          // Extract the instance name from the log line
          const parts = logLine.split("|");
          const instanceName = parts[4].trim().replace(" has begun.", "");
          console.log("Instance name:", instanceName);

          document.getElementById("strategyTitle").innerText = instanceName;
          document.getElementById("strategyText").innerText =
            "Fetching instance strategy for " + instanceName + "...";

          // Send a request to the server to fetch the instance strategy
          fetch(
            `http://localhost:3000/api/instance-strategy?instanceName=${encodeURIComponent(instanceName)}`,
          )
            .then((response) => response.json())
            .then((data) => {
              const strategyText = data.summary;
              const formattedText = strategyText;
              document.getElementById("strategyText").innerHTML = formattedText;
              document.getElementById("strategyContent").style.display =
                "block";
            })
            .catch((error) => {
              console.error("Error fetching instance strategy:", error);
              document.getElementById("strategyText").innerText =
                "Failed to fetch instance strategy. Please check your network connection.";
              document.getElementById("strategyContent").style.display =
                "block";
            });
        }
      });
      // Start listening for overlay events
      startOverlayEvents();

      // Variables for resizing
      var isResizing = false;
      var lastMouseX = 0;
      var lastMouseY = 0;
      var strategyContent = document.getElementById("strategyContent");

      // Add event listener for onOverlayStateUpdate event
      addOverlayListener("onOverlayStateUpdate", function (e) {
        if (!e.detail.isLocked) {
          document.documentElement.classList.add("resizeHandle");
          document.documentElement.addEventListener(
            "mousedown",
            initResize,
            false,
          );
        } else {
          document.documentElement.classList.remove("resizeHandle");
          document.documentElement.removeEventListener(
            "mousedown",
            initResize,
            false,
          );
        }
      });

      // Function to initialize resizing
      function initResize(e) {
        if (e.button === 0 && e.target === document.documentElement) {
          isResizing = true;
          lastMouseX = e.clientX;
          lastMouseY = e.clientY;
          document.documentElement.addEventListener("mousemove", resize, false);
          document.documentElement.addEventListener(
            "mouseup",
            stopResize,
            false,
          );
        }
      }

      // Function to handle resizing
      function resize(e) {
        if (isResizing) {
          var deltaX = e.clientX - lastMouseX;
          var deltaY = e.clientY - lastMouseY;
          var newWidth = document.documentElement.offsetWidth + deltaX;
          var newHeight = document.documentElement.offsetHeight + deltaY;
          document.documentElement.style.width = newWidth + "px";
          document.documentElement.style.height = newHeight + "px";
          lastMouseX = e.clientX;
          lastMouseY = e.clientY;
        }
      }

      // Function to stop resizing
      function stopResize(e) {
        isResizing = false;
        document.documentElement.removeEventListener(
          "mousemove",
          resize,
          false,
        );
        document.documentElement.removeEventListener(
          "mouseup",
          stopResize,
          false,
        );
      }
      // Add event listener for the mousewheel event on the strategyContent
      strategyContent.addEventListener(
        "wheel",
        function (e) {
          if (strategyContent.scrollHeight > strategyContent.clientHeight) {
            e.preventDefault();
            strategyContent.scrollTop += e.deltaY;
          }
        },
        { passive: false },
      );
    </script>
  </body>
</html>
